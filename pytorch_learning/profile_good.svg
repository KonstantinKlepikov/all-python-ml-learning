<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>&lt;module&gt; (torch/__init__.py:136) (13 samples, 1.59%)</title><rect x="0.0000%" y="148" width="1.5892%" height="15" fill="rgb(227,0,7)"/><text x="0.2500%" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (13 samples, 1.59%)</title><rect x="0.0000%" y="164" width="1.5892%" height="15" fill="rgb(217,0,24)"/><text x="0.2500%" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (13 samples, 1.59%)</title><rect x="0.0000%" y="180" width="1.5892%" height="15" fill="rgb(221,193,54)"/><text x="0.2500%" y="190.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:670) (13 samples, 1.59%)</title><rect x="0.0000%" y="196" width="1.5892%" height="15" fill="rgb(248,212,6)"/><text x="0.2500%" y="206.50"></text></g><g><title>module_from_spec (&lt;frozen importlib._bootstrap&gt;:583) (13 samples, 1.59%)</title><rect x="0.0000%" y="212" width="1.5892%" height="15" fill="rgb(208,68,35)"/><text x="0.2500%" y="222.50"></text></g><g><title>create_module (&lt;frozen importlib._bootstrap_external&gt;:1043) (13 samples, 1.59%)</title><rect x="0.0000%" y="228" width="1.5892%" height="15" fill="rgb(232,128,0)"/><text x="0.2500%" y="238.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (13 samples, 1.59%)</title><rect x="0.0000%" y="244" width="1.5892%" height="15" fill="rgb(207,160,47)"/><text x="0.2500%" y="254.50"></text></g><g><title>&lt;module&gt; (good_random.py:1) (16 samples, 1.96%)</title><rect x="0.0000%" y="52" width="1.9560%" height="15" fill="rgb(228,23,34)"/><text x="0.2500%" y="62.50">&lt;..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (16 samples, 1.96%)</title><rect x="0.0000%" y="68" width="1.9560%" height="15" fill="rgb(218,30,26)"/><text x="0.2500%" y="78.50">_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (16 samples, 1.96%)</title><rect x="0.0000%" y="84" width="1.9560%" height="15" fill="rgb(220,122,19)"/><text x="0.2500%" y="94.50">_..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (16 samples, 1.96%)</title><rect x="0.0000%" y="100" width="1.9560%" height="15" fill="rgb(250,228,42)"/><text x="0.2500%" y="110.50">_..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (16 samples, 1.96%)</title><rect x="0.0000%" y="116" width="1.9560%" height="15" fill="rgb(240,193,28)"/><text x="0.2500%" y="126.50">e..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (16 samples, 1.96%)</title><rect x="0.0000%" y="132" width="1.9560%" height="15" fill="rgb(216,20,37)"/><text x="0.2500%" y="142.50">_..</text></g><g><title>_resnet (torchvision/models/resnet.py:224) (11 samples, 1.34%)</title><rect x="1.9560%" y="84" width="1.3447%" height="15" fill="rgb(206,188,39)"/><text x="2.2060%" y="94.50"></text></g><g><title>&lt;module&gt; (good_random.py:11) (16 samples, 1.96%)</title><rect x="1.9560%" y="52" width="1.9560%" height="15" fill="rgb(217,207,13)"/><text x="2.2060%" y="62.50">&lt;..</text></g><g><title>resnet18 (torchvision/models/resnet.py:241) (16 samples, 1.96%)</title><rect x="1.9560%" y="68" width="1.9560%" height="15" fill="rgb(231,73,38)"/><text x="2.2060%" y="78.50">r..</text></g><g><title>&lt;module&gt; (good_random.py:19) (127 samples, 15.53%)</title><rect x="3.9120%" y="52" width="15.5257%" height="15" fill="rgb(225,20,46)"/><text x="4.1620%" y="62.50">&lt;module&gt; (good_random.py..</text></g><g><title>to (torch/nn/modules/module.py:443) (127 samples, 15.53%)</title><rect x="3.9120%" y="68" width="15.5257%" height="15" fill="rgb(210,31,41)"/><text x="4.1620%" y="78.50">to (torch/nn/modules/mod..</text></g><g><title>_apply (torch/nn/modules/module.py:203) (127 samples, 15.53%)</title><rect x="3.9120%" y="84" width="15.5257%" height="15" fill="rgb(221,200,47)"/><text x="4.1620%" y="94.50">_apply (torch/nn/modules..</text></g><g><title>_apply (torch/nn/modules/module.py:225) (127 samples, 15.53%)</title><rect x="3.9120%" y="100" width="15.5257%" height="15" fill="rgb(226,26,5)"/><text x="4.1620%" y="110.50">_apply (torch/nn/modules..</text></g><g><title>convert (torch/nn/modules/module.py:441) (127 samples, 15.53%)</title><rect x="3.9120%" y="116" width="15.5257%" height="15" fill="rgb(249,33,26)"/><text x="4.1620%" y="126.50">convert (torch/nn/module..</text></g><g><title>&lt;module&gt; (torchvision/__init__.py:3) (9 samples, 1.10%)</title><rect x="19.4377%" y="148" width="1.1002%" height="15" fill="rgb(235,183,28)"/><text x="19.6877%" y="158.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1035) (9 samples, 1.10%)</title><rect x="19.4377%" y="164" width="1.1002%" height="15" fill="rgb(221,5,38)"/><text x="19.6877%" y="174.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (9 samples, 1.10%)</title><rect x="19.4377%" y="180" width="1.1002%" height="15" fill="rgb(247,18,42)"/><text x="19.6877%" y="190.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (9 samples, 1.10%)</title><rect x="19.4377%" y="196" width="1.1002%" height="15" fill="rgb(241,131,45)"/><text x="19.6877%" y="206.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (9 samples, 1.10%)</title><rect x="19.4377%" y="212" width="1.1002%" height="15" fill="rgb(249,31,29)"/><text x="19.6877%" y="222.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (9 samples, 1.10%)</title><rect x="19.4377%" y="228" width="1.1002%" height="15" fill="rgb(225,111,53)"/><text x="19.6877%" y="238.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (9 samples, 1.10%)</title><rect x="19.4377%" y="244" width="1.1002%" height="15" fill="rgb(238,160,17)"/><text x="19.6877%" y="254.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (9 samples, 1.10%)</title><rect x="19.4377%" y="260" width="1.1002%" height="15" fill="rgb(214,148,48)"/><text x="19.6877%" y="270.50"></text></g><g><title>&lt;module&gt; (good_random.py:2) (11 samples, 1.34%)</title><rect x="19.4377%" y="52" width="1.3447%" height="15" fill="rgb(232,36,49)"/><text x="19.6877%" y="62.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (11 samples, 1.34%)</title><rect x="19.4377%" y="68" width="1.3447%" height="15" fill="rgb(209,103,24)"/><text x="19.6877%" y="78.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (11 samples, 1.34%)</title><rect x="19.4377%" y="84" width="1.3447%" height="15" fill="rgb(229,88,8)"/><text x="19.6877%" y="94.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (11 samples, 1.34%)</title><rect x="19.4377%" y="100" width="1.3447%" height="15" fill="rgb(213,181,19)"/><text x="19.6877%" y="110.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (11 samples, 1.34%)</title><rect x="19.4377%" y="116" width="1.3447%" height="15" fill="rgb(254,191,54)"/><text x="19.6877%" y="126.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (11 samples, 1.34%)</title><rect x="19.4377%" y="132" width="1.3447%" height="15" fill="rgb(241,83,37)"/><text x="19.6877%" y="142.50"></text></g><g><title>pil_loader (torchvision/datasets/folder.py:153) (10 samples, 1.22%)</title><rect x="21.8826%" y="180" width="1.2225%" height="15" fill="rgb(233,36,39)"/><text x="22.1326%" y="190.50"></text></g><g><title>open (PIL/Image.py:2881) (9 samples, 1.10%)</title><rect x="22.0049%" y="196" width="1.1002%" height="15" fill="rgb(226,3,54)"/><text x="22.2549%" y="206.50"></text></g><g><title>_open_core (PIL/Image.py:2867) (9 samples, 1.10%)</title><rect x="22.0049%" y="212" width="1.1002%" height="15" fill="rgb(245,192,40)"/><text x="22.2549%" y="222.50"></text></g><g><title>convert (PIL/Image.py:901) (174 samples, 21.27%)</title><rect x="23.1051%" y="196" width="21.2714%" height="15" fill="rgb(238,167,29)"/><text x="23.3551%" y="206.50">convert (PIL/Image.py:901)</text></g><g><title>load (PIL/ImageFile.py:251) (173 samples, 21.15%)</title><rect x="23.2274%" y="212" width="21.1491%" height="15" fill="rgb(232,182,51)"/><text x="23.4774%" y="222.50">load (PIL/ImageFile.py:251)</text></g><g><title>__getitem__ (torchvision/datasets/folder.py:135) (190 samples, 23.23%)</title><rect x="21.3936%" y="148" width="23.2274%" height="15" fill="rgb(231,60,39)"/><text x="21.6436%" y="158.50">__getitem__ (torchvision/datasets/fol..</text></g><g><title>default_loader (torchvision/datasets/folder.py:171) (189 samples, 23.11%)</title><rect x="21.5159%" y="164" width="23.1051%" height="15" fill="rgb(208,69,12)"/><text x="21.7659%" y="174.50">default_loader (torchvision/datasets/..</text></g><g><title>pil_loader (torchvision/datasets/folder.py:154) (176 samples, 21.52%)</title><rect x="23.1051%" y="180" width="21.5159%" height="15" fill="rgb(235,93,37)"/><text x="23.3551%" y="190.50">pil_loader (torchvision/datasets/f..</text></g><g><title>__call__ (torchvision/transforms/transforms.py:198) (61 samples, 7.46%)</title><rect x="44.6210%" y="180" width="7.4572%" height="15" fill="rgb(213,116,39)"/><text x="44.8710%" y="190.50">__call__ (..</text></g><g><title>resize (torchvision/transforms/functional.py:246) (61 samples, 7.46%)</title><rect x="44.6210%" y="196" width="7.4572%" height="15" fill="rgb(222,207,29)"/><text x="44.8710%" y="206.50">resize (to..</text></g><g><title>resize (PIL/Image.py:1905) (61 samples, 7.46%)</title><rect x="44.6210%" y="212" width="7.4572%" height="15" fill="rgb(206,96,30)"/><text x="44.8710%" y="222.50">resize (PI..</text></g><g><title>fetch (torch/utils/data/_utils/fetch.py:44) (261 samples, 31.91%)</title><rect x="21.3936%" y="116" width="31.9071%" height="15" fill="rgb(218,138,4)"/><text x="21.6436%" y="126.50">fetch (torch/utils/data/_utils/fetch.py:44)</text></g><g><title>&lt;listcomp&gt; (torch/utils/data/_utils/fetch.py:44) (261 samples, 31.91%)</title><rect x="21.3936%" y="132" width="31.9071%" height="15" fill="rgb(250,191,14)"/><text x="21.6436%" y="142.50">&lt;listcomp&gt; (torch/utils/data/_utils/fetch.py:44)</text></g><g><title>__getitem__ (torchvision/datasets/folder.py:137) (71 samples, 8.68%)</title><rect x="44.6210%" y="148" width="8.6797%" height="15" fill="rgb(239,60,40)"/><text x="44.8710%" y="158.50">__getitem__ ..</text></g><g><title>__call__ (torchvision/transforms/transforms.py:61) (71 samples, 8.68%)</title><rect x="44.6210%" y="164" width="8.6797%" height="15" fill="rgb(206,27,48)"/><text x="44.8710%" y="174.50">__call__ (to..</text></g><g><title>__call__ (torchvision/transforms/transforms.py:92) (10 samples, 1.22%)</title><rect x="52.0782%" y="180" width="1.2225%" height="15" fill="rgb(225,35,8)"/><text x="52.3282%" y="190.50"></text></g><g><title>train (good_random.py:34) (268 samples, 32.76%)</title><rect x="21.3936%" y="68" width="32.7628%" height="15" fill="rgb(250,213,24)"/><text x="21.6436%" y="78.50">train (good_random.py:34)</text></g><g><title>__next__ (torch/utils/data/dataloader.py:345) (268 samples, 32.76%)</title><rect x="21.3936%" y="84" width="32.7628%" height="15" fill="rgb(247,123,22)"/><text x="21.6436%" y="94.50">__next__ (torch/utils/data/dataloader.py:345)</text></g><g><title>_next_data (torch/utils/data/dataloader.py:385) (268 samples, 32.76%)</title><rect x="21.3936%" y="100" width="32.7628%" height="15" fill="rgb(231,138,38)"/><text x="21.6436%" y="110.50">_next_data (torch/utils/data/dataloader.py:385)</text></g><g><title>_forward_impl (torchvision/models/resnet.py:203) (13 samples, 1.59%)</title><rect x="55.3790%" y="116" width="1.5892%" height="15" fill="rgb(231,145,46)"/><text x="55.6290%" y="126.50"></text></g><g><title>__call__ (torch/nn/modules/module.py:550) (13 samples, 1.59%)</title><rect x="55.3790%" y="132" width="1.5892%" height="15" fill="rgb(251,118,11)"/><text x="55.6290%" y="142.50"></text></g><g><title>forward (torch/nn/modules/conv.py:353) (13 samples, 1.59%)</title><rect x="55.3790%" y="148" width="1.5892%" height="15" fill="rgb(217,147,25)"/><text x="55.6290%" y="158.50"></text></g><g><title>_conv_forward (torch/nn/modules/conv.py:350) (12 samples, 1.47%)</title><rect x="55.5012%" y="164" width="1.4670%" height="15" fill="rgb(247,81,37)"/><text x="55.7512%" y="174.50"></text></g><g><title>train (good_random.py:40) (22 samples, 2.69%)</title><rect x="55.3790%" y="68" width="2.6895%" height="15" fill="rgb(209,12,38)"/><text x="55.6290%" y="78.50">tr..</text></g><g><title>__call__ (torch/nn/modules/module.py:550) (22 samples, 2.69%)</title><rect x="55.3790%" y="84" width="2.6895%" height="15" fill="rgb(227,1,9)"/><text x="55.6290%" y="94.50">__..</text></g><g><title>forward (torchvision/models/resnet.py:220) (22 samples, 2.69%)</title><rect x="55.3790%" y="100" width="2.6895%" height="15" fill="rgb(248,47,43)"/><text x="55.6290%" y="110.50">fo..</text></g><g><title>jpeg_factory (PIL/JpegImagePlugin.py:779) (14 samples, 1.71%)</title><rect x="59.5355%" y="228" width="1.7115%" height="15" fill="rgb(221,10,30)"/><text x="59.7855%" y="238.50"></text></g><g><title>__init__ (PIL/ImageFile.py:107) (14 samples, 1.71%)</title><rect x="59.5355%" y="244" width="1.7115%" height="15" fill="rgb(210,229,1)"/><text x="59.7855%" y="254.50"></text></g><g><title>_open (PIL/JpegImagePlugin.py:371) (12 samples, 1.47%)</title><rect x="59.7800%" y="260" width="1.4670%" height="15" fill="rgb(222,148,37)"/><text x="60.0300%" y="270.50"></text></g><g><title>pil_loader (torchvision/datasets/folder.py:153) (16 samples, 1.96%)</title><rect x="59.5355%" y="180" width="1.9560%" height="15" fill="rgb(234,67,33)"/><text x="59.7855%" y="190.50">p..</text></g><g><title>open (PIL/Image.py:2881) (16 samples, 1.96%)</title><rect x="59.5355%" y="196" width="1.9560%" height="15" fill="rgb(247,98,35)"/><text x="59.7855%" y="206.50">o..</text></g><g><title>_open_core (PIL/Image.py:2867) (16 samples, 1.96%)</title><rect x="59.5355%" y="212" width="1.9560%" height="15" fill="rgb(247,138,52)"/><text x="59.7855%" y="222.50">_..</text></g><g><title>load (PIL/ImageFile.py:251) (157 samples, 19.19%)</title><rect x="61.6137%" y="212" width="19.1932%" height="15" fill="rgb(213,79,30)"/><text x="61.8637%" y="222.50">load (PIL/ImageFile.py:251)</text></g><g><title>convert (PIL/Image.py:901) (159 samples, 19.44%)</title><rect x="61.4914%" y="196" width="19.4377%" height="15" fill="rgb(246,177,23)"/><text x="61.7414%" y="206.50">convert (PIL/Image.py:901)</text></g><g><title>__getitem__ (torchvision/datasets/folder.py:135) (186 samples, 22.74%)</title><rect x="58.9242%" y="148" width="22.7384%" height="15" fill="rgb(230,62,27)"/><text x="59.1742%" y="158.50">__getitem__ (torchvision/datasets/fo..</text></g><g><title>default_loader (torchvision/datasets/folder.py:171) (185 samples, 22.62%)</title><rect x="59.0465%" y="164" width="22.6161%" height="15" fill="rgb(216,154,8)"/><text x="59.2965%" y="174.50">default_loader (torchvision/datasets..</text></g><g><title>pil_loader (torchvision/datasets/folder.py:154) (165 samples, 20.17%)</title><rect x="61.4914%" y="180" width="20.1711%" height="15" fill="rgb(244,35,45)"/><text x="61.7414%" y="190.50">pil_loader (torchvision/datasets..</text></g><g><title>__call__ (torchvision/transforms/transforms.py:198) (68 samples, 8.31%)</title><rect x="81.6626%" y="180" width="8.3130%" height="15" fill="rgb(251,115,12)"/><text x="81.9126%" y="190.50">__call__ (to..</text></g><g><title>resize (torchvision/transforms/functional.py:246) (68 samples, 8.31%)</title><rect x="81.6626%" y="196" width="8.3130%" height="15" fill="rgb(240,54,50)"/><text x="81.9126%" y="206.50">resize (torc..</text></g><g><title>resize (PIL/Image.py:1905) (68 samples, 8.31%)</title><rect x="81.6626%" y="212" width="8.3130%" height="15" fill="rgb(233,84,52)"/><text x="81.9126%" y="222.50">resize (PIL/..</text></g><g><title>to_tensor (torchvision/transforms/functional.py:74) (9 samples, 1.10%)</title><rect x="89.9756%" y="196" width="1.1002%" height="15" fill="rgb(207,117,47)"/><text x="90.2256%" y="206.50"></text></g><g><title>fetch (torch/utils/data/_utils/fetch.py:44) (272 samples, 33.25%)</title><rect x="58.9242%" y="116" width="33.2518%" height="15" fill="rgb(249,43,39)"/><text x="59.1742%" y="126.50">fetch (torch/utils/data/_utils/fetch.py:44)</text></g><g><title>&lt;listcomp&gt; (torch/utils/data/_utils/fetch.py:44) (272 samples, 33.25%)</title><rect x="58.9242%" y="132" width="33.2518%" height="15" fill="rgb(209,38,44)"/><text x="59.1742%" y="142.50">&lt;listcomp&gt; (torch/utils/data/_utils/fetch.py:44)</text></g><g><title>__getitem__ (torchvision/datasets/folder.py:137) (86 samples, 10.51%)</title><rect x="81.6626%" y="148" width="10.5134%" height="15" fill="rgb(236,212,23)"/><text x="81.9126%" y="158.50">__getitem__ (to..</text></g><g><title>__call__ (torchvision/transforms/transforms.py:61) (86 samples, 10.51%)</title><rect x="81.6626%" y="164" width="10.5134%" height="15" fill="rgb(242,79,21)"/><text x="81.9126%" y="174.50">__call__ (torch..</text></g><g><title>__call__ (torchvision/transforms/transforms.py:92) (18 samples, 2.20%)</title><rect x="89.9756%" y="180" width="2.2005%" height="15" fill="rgb(211,96,35)"/><text x="90.2256%" y="190.50">_..</text></g><g><title>train (good_random.py:48) (280 samples, 34.23%)</title><rect x="58.9242%" y="68" width="34.2298%" height="15" fill="rgb(253,215,40)"/><text x="59.1742%" y="78.50">train (good_random.py:48)</text></g><g><title>__next__ (torch/utils/data/dataloader.py:345) (280 samples, 34.23%)</title><rect x="58.9242%" y="84" width="34.2298%" height="15" fill="rgb(211,81,21)"/><text x="59.1742%" y="94.50">__next__ (torch/utils/data/dataloader.py:345)</text></g><g><title>_next_data (torch/utils/data/dataloader.py:385) (280 samples, 34.23%)</title><rect x="58.9242%" y="100" width="34.2298%" height="15" fill="rgb(208,190,38)"/><text x="59.1742%" y="110.50">_next_data (torch/utils/data/dataloader.py:385)</text></g><g><title>all (818 samples, 100%)</title><rect x="0.0000%" y="36" width="100.0000%" height="15" fill="rgb(235,213,38)"/><text x="0.2500%" y="46.50"></text></g><g><title>&lt;module&gt; (good_random.py:58) (643 samples, 78.61%)</title><rect x="21.3936%" y="52" width="78.6064%" height="15" fill="rgb(237,122,38)"/><text x="21.6436%" y="62.50">&lt;module&gt; (good_random.py:58)</text></g><g><title>train (good_random.py:54) (39 samples, 4.77%)</title><rect x="95.2323%" y="68" width="4.7677%" height="15" fill="rgb(244,218,35)"/><text x="95.4823%" y="78.50">train ..</text></g></svg></svg>